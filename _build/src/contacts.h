/* contacts.h generated by valac 0.47.2.1-ce69, the Vala compiler, do not modify */

#ifndef __SRC_CONTACTS_H__
#define __SRC_CONTACTS_H__

#include <libedataserver/libedataserver.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <folks/folks.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <gee.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gdk/gdk.h>

G_BEGIN_DECLS

#define CONTACTS_TYPE_FAKE_PERSONA_STORE (contacts_fake_persona_store_get_type ())
#define CONTACTS_FAKE_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CONTACTS_TYPE_FAKE_PERSONA_STORE, ContactsFakePersonaStore))
#define CONTACTS_FAKE_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CONTACTS_TYPE_FAKE_PERSONA_STORE, ContactsFakePersonaStoreClass))
#define CONTACTS_IS_FAKE_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CONTACTS_TYPE_FAKE_PERSONA_STORE))
#define CONTACTS_IS_FAKE_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CONTACTS_TYPE_FAKE_PERSONA_STORE))
#define CONTACTS_FAKE_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CONTACTS_TYPE_FAKE_PERSONA_STORE, ContactsFakePersonaStoreClass))

typedef struct _ContactsFakePersonaStore ContactsFakePersonaStore;
typedef struct _ContactsFakePersonaStoreClass ContactsFakePersonaStoreClass;
typedef struct _ContactsFakePersonaStorePrivate ContactsFakePersonaStorePrivate;

#define CONTACTS_TYPE_FAKE_PERSONA (contacts_fake_persona_get_type ())
#define CONTACTS_FAKE_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CONTACTS_TYPE_FAKE_PERSONA, ContactsFakePersona))
#define CONTACTS_FAKE_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CONTACTS_TYPE_FAKE_PERSONA, ContactsFakePersonaClass))
#define CONTACTS_IS_FAKE_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CONTACTS_TYPE_FAKE_PERSONA))
#define CONTACTS_IS_FAKE_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CONTACTS_TYPE_FAKE_PERSONA))
#define CONTACTS_FAKE_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CONTACTS_TYPE_FAKE_PERSONA, ContactsFakePersonaClass))

typedef struct _ContactsFakePersona ContactsFakePersona;
typedef struct _ContactsFakePersonaClass ContactsFakePersonaClass;
typedef struct _ContactsFakePersonaPrivate ContactsFakePersonaPrivate;

#define CONTACTS_TYPE_IM_SERVICE (contacts_im_service_get_type ())
typedef struct _ContactsImService ContactsImService;

#define CONTACTS_TYPE_STORE (contacts_store_get_type ())
#define CONTACTS_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CONTACTS_TYPE_STORE, ContactsStore))
#define CONTACTS_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CONTACTS_TYPE_STORE, ContactsStoreClass))
#define CONTACTS_IS_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CONTACTS_TYPE_STORE))
#define CONTACTS_IS_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CONTACTS_TYPE_STORE))
#define CONTACTS_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CONTACTS_TYPE_STORE, ContactsStoreClass))

typedef struct _ContactsStore ContactsStore;
typedef struct _ContactsStoreClass ContactsStoreClass;
typedef struct _ContactsStorePrivate ContactsStorePrivate;

#define CONTACTS_TYPE_TYPESET (contacts_typeset_get_type ())
#define CONTACTS_TYPESET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CONTACTS_TYPE_TYPESET, ContactsTypeSet))
#define CONTACTS_TYPESET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CONTACTS_TYPE_TYPESET, ContactsTypeSetClass))
#define CONTACTS_IS_TYPESET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CONTACTS_TYPE_TYPESET))
#define CONTACTS_IS_TYPESET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CONTACTS_TYPE_TYPESET))
#define CONTACTS_TYPESET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CONTACTS_TYPE_TYPESET, ContactsTypeSetClass))

typedef struct _ContactsTypeSet ContactsTypeSet;
typedef struct _ContactsTypeSetClass ContactsTypeSetClass;
typedef struct _ContactsTypeSetPrivate ContactsTypeSetPrivate;

#define CONTACTS_TYPE_TYPEDESCRIPTOR (contacts_typedescriptor_get_type ())
#define CONTACTS_TYPEDESCRIPTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CONTACTS_TYPE_TYPEDESCRIPTOR, ContactsTypeDescriptor))
#define CONTACTS_TYPEDESCRIPTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CONTACTS_TYPE_TYPEDESCRIPTOR, ContactsTypeDescriptorClass))
#define CONTACTS_IS_TYPEDESCRIPTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CONTACTS_TYPE_TYPEDESCRIPTOR))
#define CONTACTS_IS_TYPEDESCRIPTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CONTACTS_TYPE_TYPEDESCRIPTOR))
#define CONTACTS_TYPEDESCRIPTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CONTACTS_TYPE_TYPEDESCRIPTOR, ContactsTypeDescriptorClass))

typedef struct _ContactsTypeDescriptor ContactsTypeDescriptor;
typedef struct _ContactsTypeDescriptorClass ContactsTypeDescriptorClass;
typedef struct _ContactsTypeDescriptorPrivate ContactsTypeDescriptorPrivate;

struct _ContactsFakePersonaStore {
	FolksPersonaStore parent_instance;
	ContactsFakePersonaStorePrivate * priv;
};

struct _ContactsFakePersonaStoreClass {
	FolksPersonaStoreClass parent_class;
};

struct _ContactsFakePersona {
	FolksPersona parent_instance;
	ContactsFakePersonaPrivate * priv;
};

struct _ContactsFakePersonaClass {
	FolksPersonaClass parent_class;
};

struct _ContactsImService {
	const gchar* service_name;
	const gchar* display_name;
};

struct _ContactsStore {
	GObject parent_instance;
	ContactsStorePrivate * priv;
	GeeHashMultiMap* dont_suggest_link;
};

struct _ContactsStoreClass {
	GObjectClass parent_class;
};

struct _ContactsTypeSet {
	GObject parent_instance;
	ContactsTypeSetPrivate * priv;
};

struct _ContactsTypeSetClass {
	GObjectClass parent_class;
};

struct _ContactsTypeDescriptor {
	GObject parent_instance;
	ContactsTypeDescriptorPrivate * priv;
	gchar* name;
	gchar** vcard_types;
	gint vcard_types_length1;
	GtkTreeIter iter;
};

struct _ContactsTypeDescriptorClass {
	GObjectClass parent_class;
};

extern ESourceRegistry* contacts_eds_source_registry;
gboolean contacts_ensure_eds_accounts (gboolean allow_interaction);
gboolean contacts_has_goa_account (void);
gboolean contacts_esource_uid_is_google (const gchar* uid);
gchar* contacts_lookup_esource_name_by_uid (const gchar* uid);
gchar* contacts_lookup_esource_name_by_uid_for_contact (const gchar* uid);
GtkImage* contacts_get_icon_for_goa_account (const gchar* goa_id);
GType contacts_fake_persona_store_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ContactsFakePersonaStore, g_object_unref)
extern ContactsFakePersonaStore* contacts_fake_persona_store__the_store;
ContactsFakePersonaStore* contacts_fake_persona_store_the_store (void);
ContactsFakePersonaStore* contacts_fake_persona_store_new (void);
ContactsFakePersonaStore* contacts_fake_persona_store_construct (GType object_type);
GType contacts_fake_persona_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ContactsFakePersona, g_object_unref)
ContactsFakePersona* contacts_fake_persona_new (FolksPersonaStore* store,
                                                GHashTable* details);
ContactsFakePersona* contacts_fake_persona_construct (GType object_type,
                                                      FolksPersonaStore* store,
                                                      GHashTable* details);
GType contacts_im_service_get_type (void) G_GNUC_CONST;
ContactsImService* contacts_im_service_dup (const ContactsImService* self);
void contacts_im_service_free (ContactsImService* self);
gchar* contacts_im_service_get_display_name (const gchar* service_name);
GType contacts_store_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ContactsStore, g_object_unref)
gboolean contacts_store_may_suggest_link (ContactsStore* self,
                                          FolksIndividual* a,
                                          FolksIndividual* b);
void contacts_store_add_no_suggest_link (ContactsStore* self,
                                         FolksIndividual* a,
                                         FolksIndividual* b);
GeeCollection* contacts_store_get_contacts (ContactsStore* self);
void contacts_store_find_contact (ContactsStore* self,
                                  FolksQuery* query,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
FolksIndividual* contacts_store_find_contact_finish (ContactsStore* self,
                                                     GAsyncResult* _res_);
ContactsStore* contacts_store_new (void);
ContactsStore* contacts_store_construct (GType object_type);
FolksIndividualAggregator* contacts_store_get_aggregator (ContactsStore* self);
FolksBackendStore* contacts_store_get_backend_store (ContactsStore* self);
gboolean contacts_store_get_is_quiescent (ContactsStore* self);
gboolean contacts_store_get_is_prepared (ContactsStore* self);
GType contacts_typeset_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ContactsTypeSet, g_object_unref)
void contacts_typeset_get_iter_for_field_details (ContactsTypeSet* self,
                                                  FolksAbstractFieldDetails* detail,
                                                  GtkTreeIter* iter);
void contacts_typeset_get_iter_for_vcard_type (ContactsTypeSet* self,
                                               const gchar* type,
                                               GtkTreeIter* iter);
void contacts_typeset_get_iter_for_custom_label (ContactsTypeSet* self,
                                                 const gchar* label,
                                                 GtkTreeIter* iter);
gchar* contacts_typeset_format_type (ContactsTypeSet* self,
                                     FolksAbstractFieldDetails* detail);
GType contacts_typedescriptor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ContactsTypeDescriptor, g_object_unref)
ContactsTypeDescriptor* contacts_typeset_lookup_descriptor_in_store (ContactsTypeSet* self,
                                                                     const gchar* display_name);
ContactsTypeDescriptor* contacts_typeset_get_descriptor_for_custom_label (ContactsTypeSet* self,
                                                                          const gchar* label);
ContactsTypeDescriptor* contacts_typeset_lookup_descriptor_for_field_details (ContactsTypeSet* self,
                                                                              FolksAbstractFieldDetails* detail);
const gchar* contacts_typeset_get_category (ContactsTypeSet* self);
void contacts_typeset_set_category (ContactsTypeSet* self,
                                    const gchar* value);
GtkListStore* contacts_typeset_get_store (ContactsTypeSet* self);
ContactsTypeSet* contacts_typeset_get_general (void);
ContactsTypeSet* contacts_typeset_get_email (void);
ContactsTypeSet* contacts_typeset_get_phone (void);
#define CONTACTS_TYPEDESCRIPTOR_X_GOOGLE_LABEL "x-google-label"
ContactsTypeDescriptor* contacts_typedescriptor_new_vcard (const gchar* untranslated_name,
                                                           gchar** types,
                                                           gint types_length1);
ContactsTypeDescriptor* contacts_typedescriptor_construct_vcard (GType object_type,
                                                                 const gchar* untranslated_name,
                                                                 gchar** types,
                                                                 gint types_length1);
ContactsTypeDescriptor* contacts_typedescriptor_new_custom (const gchar* name);
ContactsTypeDescriptor* contacts_typedescriptor_construct_custom (GType object_type,
                                                                  const gchar* name);
ContactsTypeDescriptor* contacts_typedescriptor_new_other (void);
ContactsTypeDescriptor* contacts_typedescriptor_construct_other (GType object_type);
gboolean contacts_typedescriptor_is_custom (ContactsTypeDescriptor* self);
void contacts_typedescriptor_save_to_field_details (ContactsTypeDescriptor* self,
                                                    FolksAbstractFieldDetails* details);
gchar* contacts_typedescriptor_to_string (ContactsTypeDescriptor* self);
ContactsTypeDescriptor* contacts_typedescriptor_new (void);
ContactsTypeDescriptor* contacts_typedescriptor_construct (GType object_type);
const gchar* contacts_typedescriptor_get_display_name (ContactsTypeDescriptor* self);
gboolean contacts_is_set (const gchar* str);
void contacts_add_separator (GtkListBoxRow* row,
                             GtkListBoxRow* before_row);
void contacts_activate_action (const gchar* app_id,
                               const gchar* action,
                               GVariant* parameter,
                               guint32 timestamp);
void contacts_utils_compose_mail (const gchar* email);
gpointer contacts_utils_get_first (GType t_type,
                                   GBoxedCopyFunc t_dup_func,
                                   GDestroyNotify t_destroy_func,
                                   GeeCollection* collection);
void contacts_utils_grab_entry_focus_no_select (GtkEntry* entry);
gchar** contacts_utils_get_stock_avatars (gint* result_length1);
FolksPersonaStore** contacts_utils_get_eds_address_books (ContactsStore* contacts_store,
                                                          gint* result_length1);
void contacts_utils_show_error_dialog (const gchar* _error_,
                                       GtkWindow* toplevel);
gboolean contacts_utils_has_main_persona (FolksIndividual* individual);
gboolean contacts_utils_is_ignorable (FolksIndividual* individual);
gboolean contacts_utils_suggest_link_to (ContactsStore* store,
                                         FolksIndividual* _self_,
                                         FolksIndividual* other);
gint contacts_utils_compare_fields (void* _a,
                                    void* _b);
GeeList* contacts_utils_sort_fields (GType t_type,
                                     GBoxedCopyFunc t_dup_func,
                                     GDestroyNotify t_destroy_func,
                                     GeeCollection* fields);
gchar** contacts_utils_format_address (FolksPostalAddress* addr,
                                       gint* result_length1);
gboolean contacts_utils_can_remove_personas (FolksIndividual* individual);
GeeList* contacts_utils_get_personas_for_display (FolksIndividual* individual);
FolksPersona* contacts_utils_find_primary_persona (FolksIndividual* individual);
FolksPersona* contacts_utils_find_persona_from_uid (FolksIndividual* individual,
                                                    const gchar* uid);
gchar* contacts_utils_format_persona_stores (FolksIndividual* individual);
gchar* contacts_utils_format_persona_store_name (FolksPersonaStore* store);
gboolean contacts_utils_persona_is_google_other (FolksPersona* persona);
gboolean contacts_utils_persona_is_google_profile (FolksPersona* persona);
gchar* contacts_utils_format_persona_store_name_for_contact (FolksPersona* persona);
void contacts_utils_set_individual_property (FolksIndividual* individual,
                                             const gchar* property_name,
                                             GValue* value,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
void contacts_utils_set_individual_property_finish (GAsyncResult* _res_,
                                                    GError** error);
void contacts_utils_set_persona_property (FolksPersona* persona,
                                          const gchar* property_name,
                                          GValue* new_value,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
void contacts_utils_set_persona_property_finish (GAsyncResult* _res_,
                                                 GError** error);
GdkPixbuf* contacts_avatar_utils_generate_user_picture (const gchar* name,
                                                        gint size,
                                                        gboolean label);
GdkPixbuf* contacts_avatar_utils_round_image (GdkPixbuf* source);
gchar* contacts_avatar_utils_extract_initials_from_name (const gchar* name);
void contacts_avatar_utils_get_color_for_name (const gchar* name,
                                               GdkRGBA* result);

G_END_DECLS

#endif
