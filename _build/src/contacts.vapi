/* contacts.vapi generated by valac 0.47.2.1-ce69, do not modify. */

namespace Contacts {
	namespace AvatarUtils {
		[CCode (cheader_filename = "contacts.h")]
		public static string? extract_initials_from_name (string name);
		[CCode (cheader_filename = "contacts.h")]
		public static Gdk.Pixbuf generate_user_picture (string name, int size, bool label = true);
		[CCode (cheader_filename = "contacts.h")]
		public static Gdk.RGBA get_color_for_name (string name);
		[CCode (cheader_filename = "contacts.h")]
		public static Gdk.Pixbuf round_image (Gdk.Pixbuf source);
	}
	namespace Utils {
		[CCode (cheader_filename = "contacts.h")]
		public static bool can_remove_personas (Folks.Individual individual);
		[CCode (cheader_filename = "contacts.h")]
		public static int compare_fields (void* _a, void* _b);
		[CCode (cheader_filename = "contacts.h")]
		public static void compose_mail (string email);
		[CCode (cheader_filename = "contacts.h")]
		public static Folks.Persona? find_persona_from_uid (Folks.Individual individual, string uid);
		[CCode (cheader_filename = "contacts.h")]
		public static Folks.Persona? find_primary_persona (Folks.Individual individual);
		[CCode (cheader_filename = "contacts.h")]
		public static string[] format_address (Folks.PostalAddress addr);
		[CCode (cheader_filename = "contacts.h")]
		public static string format_persona_store_name (Folks.PersonaStore store);
		[CCode (cheader_filename = "contacts.h")]
		public static string format_persona_store_name_for_contact (Folks.Persona persona);
		[CCode (cheader_filename = "contacts.h")]
		public static string format_persona_stores (Folks.Individual individual);
		[CCode (cheader_filename = "contacts.h")]
		public static Folks.PersonaStore[] get_eds_address_books (Contacts.Store contacts_store);
		[CCode (cheader_filename = "contacts.h")]
		public static T get_first<T> (Gee.Collection<T> collection);
		[CCode (cheader_filename = "contacts.h")]
		public static Gee.List<Folks.Persona> get_personas_for_display (Folks.Individual individual);
		[CCode (cheader_filename = "contacts.h")]
		public static string[] get_stock_avatars ();
		[CCode (cheader_filename = "contacts.h")]
		public static void grab_entry_focus_no_select (Gtk.Entry entry);
		[CCode (cheader_filename = "contacts.h")]
		public static bool has_main_persona (Folks.Individual individual);
		[CCode (cheader_filename = "contacts.h")]
		public static bool is_ignorable (Folks.Individual individual);
		[CCode (cheader_filename = "contacts.h")]
		public static bool persona_is_google_other (Folks.Persona persona);
		[CCode (cheader_filename = "contacts.h")]
		public static bool persona_is_google_profile (Folks.Persona persona);
		[CCode (cheader_filename = "contacts.h")]
		public static async void set_individual_property (Folks.Individual individual, string property_name, GLib.Value value) throws GLib.Error, Folks.PropertyError;
		[CCode (cheader_filename = "contacts.h")]
		public static async void set_persona_property (Folks.Persona persona, string property_name, GLib.Value new_value) throws Folks.PropertyError, Folks.IndividualAggregatorError;
		[CCode (cheader_filename = "contacts.h")]
		public static void show_error_dialog (string error, Gtk.Window toplevel);
		[CCode (cheader_filename = "contacts.h")]
		public static Gee.List<T> sort_fields<T> (Gee.Collection<T> fields);
		[CCode (cheader_filename = "contacts.h")]
		public static bool suggest_link_to (Contacts.Store store, Folks.Individual self, Folks.Individual other);
	}
	[CCode (cheader_filename = "contacts.h")]
	public class FakePersona : Folks.Persona, Folks.AvatarDetails, Folks.BirthdayDetails, Folks.EmailDetails, Folks.ImDetails, Folks.NameDetails, Folks.NoteDetails, Folks.PhoneDetails, Folks.UrlDetails, Folks.PostalAddressDetails {
		public FakePersona (Folks.PersonaStore store, GLib.HashTable<string,GLib.Value?> details);
		public override string[] linkable_properties { get; }
		public override string[] writeable_properties { get; }
	}
	[CCode (cheader_filename = "contacts.h")]
	public class FakePersonaStore : Folks.PersonaStore {
		public static Contacts.FakePersonaStore _the_store;
		public FakePersonaStore ();
		public override async Folks.Persona? add_persona_from_details (GLib.HashTable<string,GLib.Value?> details) throws Folks.PersonaStoreError;
		public override async void prepare () throws GLib.Error;
		public override async void remove_persona (Folks.Persona persona) throws Folks.PersonaStoreError;
		public static Contacts.FakePersonaStore the_store ();
		public override string[] always_writeable_properties { get; }
		public override Folks.MaybeBool can_add_personas { get; }
		public override Folks.MaybeBool can_alias_personas { get; }
		public override Folks.MaybeBool can_group_personas { get; }
		public override Folks.MaybeBool can_remove_personas { get; }
		public override bool is_prepared { get; }
		public override bool is_quiescent { get; }
		public override Gee.Map<string,Folks.Persona> personas { get; }
		public override string type_id { get; }
	}
	[CCode (cheader_filename = "contacts.h")]
	public class Store : GLib.Object {
		public Gee.HashMultiMap<string,string> dont_suggest_link;
		public Store ();
		public void add_no_suggest_link (Folks.Individual a, Folks.Individual b);
		public async Folks.Individual? find_contact (Folks.Query query);
		public Gee.Collection<Folks.Individual> get_contacts ();
		public bool may_suggest_link (Folks.Individual a, Folks.Individual b);
		public Folks.IndividualAggregator aggregator { get; private set; }
		public Folks.BackendStore backend_store { get; }
		public bool is_prepared { get; }
		public bool is_quiescent { get; }
		public signal void added (Folks.Individual c);
		public signal void prepared ();
		public signal void quiescent ();
		public signal void removed (Folks.Individual c);
	}
	[CCode (cheader_filename = "contacts.h")]
	public class TypeDescriptor : GLib.Object {
		public Gtk.TreeIter iter;
		public string? name;
		public string[]? vcard_types;
		public const string X_GOOGLE_LABEL;
		public TypeDescriptor ();
		public TypeDescriptor.custom (string name);
		public bool is_custom ();
		public TypeDescriptor.other ();
		public void save_to_field_details (Folks.AbstractFieldDetails details);
		public string to_string ();
		public TypeDescriptor.vcard (string untranslated_name, string[] types);
		public string display_name { get; }
	}
	[CCode (cheader_filename = "contacts.h")]
	public class TypeSet : GLib.Object {
		public string format_type (Folks.AbstractFieldDetails detail);
		public unowned Contacts.TypeDescriptor? get_descriptor_for_custom_label (string label);
		public void get_iter_for_custom_label (string label, out Gtk.TreeIter iter);
		public void get_iter_for_field_details (Folks.AbstractFieldDetails detail, out Gtk.TreeIter iter);
		public void get_iter_for_vcard_type (string type, out Gtk.TreeIter iter);
		public Contacts.TypeDescriptor lookup_descriptor_for_field_details (Folks.AbstractFieldDetails detail);
		public unowned Contacts.TypeDescriptor? lookup_descriptor_in_store (string display_name);
		public string category { get; set construct; }
		public static Contacts.TypeSet email { get; }
		public static Contacts.TypeSet general { get; }
		public static Contacts.TypeSet phone { get; }
		public Gtk.ListStore store { get; private set; }
	}
	[CCode (cheader_filename = "contacts.h")]
	public struct ImService {
		public weak string service_name;
		public weak string display_name;
		public static string get_display_name (string service_name);
	}
	[CCode (cheader_filename = "contacts.h")]
	public static E.SourceRegistry? eds_source_registry;
	[CCode (cheader_filename = "contacts.h")]
	public static void activate_action (string app_id, string action, GLib.Variant? parameter, uint32 timestamp);
	[CCode (cheader_filename = "contacts.h")]
	public static void add_separator (Gtk.ListBoxRow row, Gtk.ListBoxRow? before_row);
	[CCode (cheader_filename = "contacts.h")]
	public static bool ensure_eds_accounts (bool allow_interaction);
	[CCode (cheader_filename = "contacts.h")]
	public static bool esource_uid_is_google (string uid);
	[CCode (cheader_filename = "contacts.h")]
	public static Gtk.Image? get_icon_for_goa_account (string goa_id);
	[CCode (cheader_filename = "contacts.h")]
	public static bool has_goa_account ();
	[CCode (cheader_filename = "contacts.h")]
	public static bool is_set (string? str);
	[CCode (cheader_filename = "contacts.h")]
	public static string? lookup_esource_name_by_uid (string uid);
	[CCode (cheader_filename = "contacts.h")]
	public static string? lookup_esource_name_by_uid_for_contact (string uid);
}
